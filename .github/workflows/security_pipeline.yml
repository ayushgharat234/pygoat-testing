name: Python DevSecOps Pipeline (GitHub Actions)

on: 
    push:
        branches: 
            - master
    pull_request:
        branches:
            - master

permissions:
    contents: read
    security-events: write
    actions: read

env:
    IMAGE_NAME: pygoat
    REGISTRY: ghcr.io
    IMAGE_TAG: ${{ github.sha }}

jobs:
    security_scan:
        runs-on: ubuntu-latest
        # Permissions are inherited from the workflow level (contents: read, security-events: write)
        steps:
            - name: Checkout Code 
              uses: actions/checkout@v4
              with: 
                # FIX: Removed deprecated 'fetch_depth' input that caused warnings (default is fetch_depth: 1)
                fetch-depth: 0 # Keep 0 to ensure Gitleaks scans the full history

            - name: Set up Python
              uses: actions/setup-python@v5 
              with: 
                python-version: '3.11' 

            - name: Install Tools (Bandit, Semgrep)
              run: |
                pip install bandit semgrep 
                
            - name: Install Code Quality Tools
              run: pip install black flake8

            - name: Run Flake8 Linter
              run: flake8 .
              continue-on-error: true 

            - name: Run Black Formatter Check
              run: black . --check
              continue-on-error: true 

            - name: Install Project Dependencies
              run: pip install -r requirements.txt

            - name: Static Application Security Testing (SAST) with Bandit (JSON)
              run: |
                bandit -r . -o bandit-report.json -f json || true
              continue-on-error: true
            
            - name: SAST with Semgrep (SARIF Output)
              # FIX: Removed deprecated 'output' input that caused warnings/failures
              uses: returntocorp/semgrep-action@v1
              with:
                config: "auto"
                # Semgrep Action now uses its internal logic to save output if 'output' is omitted.
              continue-on-error: true
            
            - name: SCA (Dependency Check) with OWASP Dependency-Check Action (SARIF)
              uses: dependency-check/Dependency-Check_Action@main
              id: dependency_check_action
              with:
                project: 'Python-App'
                path: '.'
                format: 'SARIF'
                out: dependency-check-reports
              continue-on-error: true
            
            - name: Secrets Detection with GitLeaks (SARIF)
              # FIX: Gitleaks Action is updated to use the 'args' input to ensure SARIF output
              uses: zricethezav/gitleaks-action@v1
              with: 
                args: --report-path=gitleaks-report.sarif --format=sarif
              continue-on-error: true 
            
            - name: Upload SAST/SCA/Secrets SARIF Reports to GitHub
              # FIX: Using a shell script to robustly generate the SARIF file list (addressing persistent "Path does not exist" errors)
              id: sarif_prep
              run: |
                sarif_files=""
                # Semgrep action saves SARIF to a known location, but often needs manual fetch/rename if 'output' is missing.
                # Since the exact Semgrep output path is dynamic, we explicitly check for the generated files:
                
                # Check for files in the expected location
                if [ -f semgrep-report.sarif ]; then sarif_files+=" semgrep-report.sarif"; fi
                if [ -f dependency-check-reports/dependency-check-report.sarif ]; then sarif_files+=" dependency-check-reports/dependency-check-report.sarif"; fi
                if [ -f gitleaks-report.sarif ]; then sarif_files+=" gitleaks-report.sarif"; fi
                
                # Check if Semgrep generated its report to the default name (if 'output' was omitted)
                if [ -f semgrep.sarif ]; then sarif_files+=" semgrep.sarif"; fi

                # Output the list to be used by the upload-sarif action
                echo "sarif_list=$sarif_files" >> $GITHUB_OUTPUT # FIX: Use environment file for output
                echo "Found SARIF files: $sarif_files"

            - name: Perform SARIF Upload
              uses: github/codeql-action/upload-sarif@v3 
              if: always() && steps.sarif_prep.outputs.sarif_list != ''
              with: 
                sarif_file: ${{ steps.sarif_prep.outputs.sarif_list }}
              continue-on-error: true


    container_scan: 
        runs-on: ubuntu-latest 
        needs: security_scan
        # FIX: Added 'packages: write' permission to allow pushing to ghcr.io
        permissions:
            packages: write
            contents: read # Ensure content reading is still available for checkout/build
        steps:
            - name: Setup Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Checkout Code 
              uses: actions/checkout@v4 

            - name: Docker Login to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                registry: ${{ env.REGISTRY }}
                username: ${{ github.actor }}
                password: ${{ secrets.GITHUB_TOKEN }}

            - name: Build and Push Docker Image
              uses: docker/build-push-action@v5 
              with: 
                context: .
                push: true
                tags: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
                # Attestation flags remain disabled due to runner limitations

            # Trivy is now used for both Filesystem/SBOM and Image Scanning (replacing Syft/Grype)
            - name: SBOM Generation and Vulnerability Scan (Trivy Filesystem)
              uses: aquasecurity/trivy-action@master
              with:
                scan-type: 'fs'
                format: 'sarif'
                output: 'trivy-fs-report.sarif'
                exit-code: '0' 
              continue-on-error: true

            - name: Upload Trivy Filesystem Scan SARIF report
              uses: github/codeql-action/upload-sarif@v3
              if: always() && hashFiles('trivy-fs-report.sarif') != ''
              with:
                sarif_file: trivy-fs-report.sarif

            - name: Docker Scout Scan 
              uses: docker/scout-action@v1 
              with: 
                command: cves 
                image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
                only-severity: high,critical

            - name: Image Scan with Trivy (SARIF)
              uses: aquasecurity/trivy-action@master
              with: 
                image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
                format: sarif
                output: trivy-image-report.sarif
                exit-code: '0'
              continue-on-error: true 

            - name: Upload Trivy Image Scan SARIF report
              uses: github/codeql-action/upload-sarif@v3
              if: always() && hashFiles('trivy-image-report.sarif') != ''
              with:
                sarif_file: trivy-image-report.sarif
            
            - name: Upload Security Artifacts (Mixed JSON/SPDX/HTML)
              uses: actions/upload-artifact@v4 
              if: always()
              with:
                name: security-reports 
                path: |
                    *.json
                    *.spdx.json
                    *.html
                    dependency-check-reports/*.sarif
                    *.sarif # Catch all remaining SARIF files from the root