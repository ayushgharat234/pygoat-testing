name: Python DevSecOps Pipeline (GitHub Actions)

on: 
    push:
        branches: 
            - master
    pull_request:
        branches:
            - master

permissions:
    contents: read
    security-events: write
    actions: read

env:
    IMAGE_NAME: pygoat
    REGISTRY: ghcr.io
    IMAGE_TAG: ${{ github.sha }}

jobs:
    security_scan:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Code 
              uses: actions/checkout@v4
              with: 
                fetch_depth: 0

            - name: Set up Python
              uses: actions/setup-python@v5 
              with: 
                python-version: '3.11' 

            - name: Install Tools (Bandit, Semgrep)
              run: |
                pip install bandit semgrep 
                
            - name: Install Code Quality Tools
              run: pip install black flake8

            - name: Run Flake8 Linter
              run: flake8 .
              continue-on-error: true 

            - name: Run Black Formatter Check
              run: black . --check
              continue-on-error: true 

            - name: Install Project Dependencies
              run: pip install -r requirements.txt

            - name: Static Application Security Testing (SAST) with Bandit (JSON)
              run: |
                # Bandit outputs JSON (not SARIF natively)
                bandit -r . -o bandit-report.json -f json || true
              continue-on-error: true
            
            - name: SAST with Semgrep (SARIF Output)
              uses: returntocorp/semgrep-action@v1
              with:
                config: "auto"
                output: semgrep-report.sarif
              continue-on-error: true
            
            - name: SCA (Dependency Check) with OWASP Dependency-Check (SARIF via Docker)
              id: dependency-check_cli
              run: |
                # Dependency Check outputs SARIF
                docker run --rm \
                  -v ${{ github.workspace }}:/src \
                  -v /tmp/dependency-check-data:/usr/share/dependency-check/data \
                  owasp/dependency-check:latest \
                  --scan /src \
                  --format SARIF \
                  --out /src \
                  --project 'Python-App' \
                  --reportname dependency-check-report \
                  --failOnCVSS 0 
              continue-on-error: true
            
            - name: Secrets Detection with GitLeaks (SARIF)
              uses: zricethezav/gitleaks-action@v1
              with: 
                format: sarif
                output: gitleaks-report.sarif 
              continue-on-error: true 
            
            - name: Upload SAST/SCA/Secrets SARIF Reports to GitHub
              uses: github/codeql-action/upload-sarif@v3 
              if: always()
              with: 
                sarif_file: |
                    semgrep-report.sarif
                    dependency-check-report.sarif
                    gitleaks-report.sarif

    container_scan: 
        runs-on: ubuntu-latest 
        needs: security_scan
        steps:
            - name: Checkout Code 
              uses: actions/checkout@v4 

            - name: Docker Login to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                registry: ${{ env.REGISTRY }}
                username: ${{ github.actor }}
                password: ${{ secrets.GITHUB_TOKEN }}

            - name: Build Docker Image
              uses: docker/build-push-action@v5 
              with: 
                context: .
                push: true
                tags: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
                provenance: true
                sbom: true 
            
            - name: SBOM Generation with Syft (SPDX JSON)
              uses: anchore/syft-action@v0.12.0 
              with: 
                image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
                format: spdx-json
                output-file: syft-sbom.spdx.json

            - name: Vulnerability Scanning with Grype (SARIF)
              uses: anchore/grype-action@v0.10.0
              with: 
                image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
                output: grype-report.sarif
                severity-cutoff: medium 
              continue-on-error: true
            
            - name: Upload Grype SARIF report
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                sarif_file: grype-report.sarif

            - name: Docker Scout Scan 
              uses: docker/scout-action@v1 
              with: 
                command: cves 
                image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
                only-severity: high,critical

            - name: Image Scan with Trivy (SARIF)
              uses: aquasecurity/trivy-action@master
              with: 
                image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
                format: sarif
                output: trivy-image-report.sarif
                exit-code: '1'
                ignore-unfixed: true 

            - name: Upload Trivy Image Scan SARIF report
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                sarif_file: trivy-image-report.sarif
            
            - name: Upload Security Artifacts (Mixed JSON/SPDX/HTML)
              uses: actions/upload-artifact@v4 
              if: always()
              with:
                name: security-reports 
                path: |
                    *.json
                    *.spdx.json
                    *.html